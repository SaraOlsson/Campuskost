{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","config","console","log","process","API_KEY","useStyles","makeStyles","body","padding","footer","position","left","bottom","width","display","justifyContent","bottomMenu","imageContainer","flexDirection","flexWrap","marginBottom","foodImg","backgroundColor","height","margin","borderRadius","ImageContainer","props","classes","className","data","title","Profile","Feed","useState","undefined","images","setImages","setRecipes","useEffect","someFetcher","recpiesRef","db","collection","removeImg","listId","a","get","then","snapshot","images_array","recipe_docs","forEach","doc","push","key","id","removeFunction","catch","err","App","React","value","setValue","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","firestore","initFirebase","mainContainer","exact","path","component","BottomNavigation","onChange","event","newValue","BottomNavigationAction","label","icon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3363b55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect  } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\n\nrequire('dotenv').config();\n//\n\nconsole.log(process.env);\n\nconst API_KEY = process.env.REACT_APP_FIREBASE_API_KEY;\n\nconsole.log(API_KEY);\n\nconst useStyles = makeStyles({\n  body: {\n    padding: 15\n  },\n  footer: {\n    position: 'fixed',\n    left: 0,\n    bottom: 0,\n    width: 100 + '%',\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  bottomMenu: {\n    width: 500,\n  },\n  imageContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    marginBottom: 50,\n\n  },\n  foodImg: {\n    backgroundColor: 'pink',\n    height: 100,\n    width: 100,\n    margin: 5,\n    borderRadius: 20\n  },\n\n});\n\nfunction ImageContainer(props) {\n\n  const classes = useStyles();\n\n  console.log(props)\n  // <button onClick={() => props.removeFunction(props.listId) }>del</button>\n\n  return (\n\n    <div>\n\n      <div className={classes.foodImg}>\n\n      </div>\n      {props.data.title}\n    </div>\n\n  );\n\n}\n\nfunction Profile(props) {\n\n  const classes = useStyles();\n\n  // console.log(props)\n\n  return (\n\n    <div>\n    <h1>Hey you</h1>\n    </div>\n\n  );\n\n}\n\nfunction Feed() {\n\n  const [images, setImages] = useState(undefined);\n  const [recipes, setRecipes] = useState(undefined);\n  const [docs, setDocs] = useState(undefined);\n\n  useEffect(() => {\n    someFetcher();\n  }, []);\n\n  const classes = useStyles();\n  let recpiesRef = db.collection('recipes');\n\n  const removeImg = (listId) => {\n\n    console.log(\"remove \" + listId +  \" from parent component \")\n\n  }\n\n  const someFetcher = async () => {\n\n    recpiesRef.get()\n      .then(snapshot => {\n\n        let images_array = [];\n        let recipe_docs = [];\n\n        snapshot.forEach(doc => {\n          images_array.push(<ImageContainer key={doc.id} listId={doc.id} data={doc.data()} removeFunction={removeImg}/>);\n          recipe_docs.push(doc.data());\n          //docs_array.push(doc)\n        })\n\n        setImages(images_array);\n        setRecipes(recipe_docs);\n\n      })\n      .catch(err => {\n        console.log('Error getting documents', err);\n    });\n\n  }\n\n  // <button onClick={() => setCount(count + 1)}>Click me</button>\n\n  return (\n    <div>\n\n      <h1>Nya recept</h1>\n\n      <div className={classes.imageContainer}>{images}</div>\n\n    </div>\n  );\n\n}\n\nlet db = undefined;\nfunction initFirebase() {\n\n  console.log(\"run initFirebase\")\n\n  const firebaseConfig = {\n    apiKey: API_KEY, // \"AIzaSyAq0vTBf0o5MckjHcCOJiJ_DRK8v_UZY88\",\n    authDomain: \"campuskost-firebase.firebaseapp.com\",\n    databaseURL: \"https://campuskost-firebase.firebaseio.com\",\n    projectId: \"campuskost-firebase\",\n    storageBucket: \"campuskost-firebase.appspot.com\",\n    messagingSenderId: \"477692438735\",\n    appId: \"1:477692438735:web:2e6dce163d7f7ce8baafba\",\n    measurementId: \"G-MDB52ZHJER\"\n  };\n\n  firebase.initializeApp(firebaseConfig);\n  const db = firebase.firestore();\n\n  return db;\n}\n\n\nfunction App() {\n\n  const [value, setValue] = React.useState('recents');\n\n\n\n\n  if(db === undefined)\n  {\n    db = initFirebase();\n  }\n\n  const classes = useStyles();\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.body}>\n\n      <Router>\n\n      <div className={classes.mainContainer}>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Feed/>\n          </Route>\n          <Route path=\"/profile\" component={Profile} />\n        </Switch>\n\n      </div>\n      <div className={classes.footer}>\n        <BottomNavigation value={value} onChange={handleChange} className={classes.bottomMenu}>\n          <BottomNavigationAction label=\"Recents\" value=\"recents\" icon={<RestoreIcon />} />\n          <BottomNavigationAction label=\"Favorites\" value=\"favorites\" icon={<FavoriteIcon />} />\n          <BottomNavigationAction label=\"Nearby\" value=\"nearby\" icon={<LocationOnIcon />} />\n          <BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<FolderIcon />} />\n        </BottomNavigation>\n      </div>\n\n      </Router>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}